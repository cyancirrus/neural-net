<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="94475"><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (11 samples, 0.01%)</title><rect x="0.0042%" y="213" width="0.0116%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="11"/><text x="0.2542%" y="223.50"></text></g><g><title>libsystem_m.dylib`expf (42 samples, 0.04%)</title><rect x="0.1122%" y="197" width="0.0445%" height="15" fill="rgb(217,0,24)" fg:x="106" fg:w="42"/><text x="0.3622%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (169 samples, 0.18%)</title><rect x="0.1567%" y="197" width="0.1789%" height="15" fill="rgb(221,193,54)" fg:x="148" fg:w="169"/><text x="0.4067%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (128 samples, 0.14%)</title><rect x="0.2001%" y="181" width="0.1355%" height="15" fill="rgb(248,212,6)" fg:x="189" fg:w="128"/><text x="0.4501%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (116 samples, 0.12%)</title><rect x="0.2128%" y="165" width="0.1228%" height="15" fill="rgb(208,68,35)" fg:x="201" fg:w="116"/><text x="0.4628%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (61 samples, 0.06%)</title><rect x="0.2710%" y="149" width="0.0646%" height="15" fill="rgb(232,128,0)" fg:x="256" fg:w="61"/><text x="0.5210%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (21 samples, 0.02%)</title><rect x="0.3355%" y="197" width="0.0222%" height="15" fill="rgb(207,160,47)" fg:x="317" fg:w="21"/><text x="0.5855%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.01%)</title><rect x="0.3578%" y="197" width="0.0106%" height="15" fill="rgb(228,23,34)" fg:x="338" fg:w="10"/><text x="0.6078%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (81 samples, 0.09%)</title><rect x="0.4213%" y="181" width="0.0857%" height="15" fill="rgb(218,30,26)" fg:x="398" fg:w="81"/><text x="0.6713%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (135 samples, 0.14%)</title><rect x="0.3684%" y="197" width="0.1429%" height="15" fill="rgb(220,122,19)" fg:x="348" fg:w="135"/><text x="0.6184%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (27 samples, 0.03%)</title><rect x="0.5123%" y="197" width="0.0286%" height="15" fill="rgb(250,228,42)" fg:x="484" fg:w="27"/><text x="0.7623%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (113 samples, 0.12%)</title><rect x="0.5409%" y="197" width="0.1196%" height="15" fill="rgb(240,193,28)" fg:x="511" fg:w="113"/><text x="0.7909%" y="207.50"></text></g><g><title>neural-net`__rdl_dealloc (14 samples, 0.01%)</title><rect x="0.6764%" y="197" width="0.0148%" height="15" fill="rgb(216,20,37)" fg:x="639" fg:w="14"/><text x="0.9264%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (38 samples, 0.04%)</title><rect x="0.7706%" y="181" width="0.0402%" height="15" fill="rgb(206,188,39)" fg:x="728" fg:w="38"/><text x="1.0206%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (35 samples, 0.04%)</title><rect x="0.7737%" y="165" width="0.0370%" height="15" fill="rgb(217,207,13)" fg:x="731" fg:w="35"/><text x="1.0237%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (30 samples, 0.03%)</title><rect x="0.7790%" y="149" width="0.0318%" height="15" fill="rgb(231,73,38)" fg:x="736" fg:w="30"/><text x="1.0290%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.02%)</title><rect x="0.7939%" y="133" width="0.0169%" height="15" fill="rgb(225,20,46)" fg:x="750" fg:w="16"/><text x="1.0439%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`calloc (25 samples, 0.03%)</title><rect x="0.8108%" y="181" width="0.0265%" height="15" fill="rgb(210,31,41)" fg:x="766" fg:w="25"/><text x="1.0608%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (268 samples, 0.28%)</title><rect x="0.9431%" y="165" width="0.2837%" height="15" fill="rgb(221,200,47)" fg:x="891" fg:w="268"/><text x="1.1931%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (377 samples, 0.40%)</title><rect x="0.8383%" y="181" width="0.3990%" height="15" fill="rgb(226,26,5)" fg:x="792" fg:w="377"/><text x="1.0883%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.01%)</title><rect x="1.2268%" y="165" width="0.0106%" height="15" fill="rgb(249,33,26)" fg:x="1159" fg:w="10"/><text x="1.4768%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (20 samples, 0.02%)</title><rect x="1.2374%" y="181" width="0.0212%" height="15" fill="rgb(235,183,28)" fg:x="1169" fg:w="20"/><text x="1.4874%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (259 samples, 0.27%)</title><rect x="1.2585%" y="181" width="0.2741%" height="15" fill="rgb(221,5,38)" fg:x="1189" fg:w="259"/><text x="1.5085%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.01%)</title><rect x="1.5337%" y="181" width="0.0138%" height="15" fill="rgb(247,18,42)" fg:x="1449" fg:w="13"/><text x="1.7837%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (68 samples, 0.07%)</title><rect x="1.7528%" y="117" width="0.0720%" height="15" fill="rgb(241,131,45)" fg:x="1656" fg:w="68"/><text x="2.0028%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (125 samples, 0.13%)</title><rect x="1.7042%" y="133" width="0.1323%" height="15" fill="rgb(249,31,29)" fg:x="1610" fg:w="125"/><text x="1.9542%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (166 samples, 0.18%)</title><rect x="1.6745%" y="165" width="0.1757%" height="15" fill="rgb(225,111,53)" fg:x="1582" fg:w="166"/><text x="1.9245%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (143 samples, 0.15%)</title><rect x="1.6989%" y="149" width="0.1514%" height="15" fill="rgb(238,160,17)" fg:x="1605" fg:w="143"/><text x="1.9489%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (24 samples, 0.03%)</title><rect x="1.8566%" y="165" width="0.0254%" height="15" fill="rgb(214,148,48)" fg:x="1754" fg:w="24"/><text x="2.1066%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.01%)</title><rect x="1.9709%" y="133" width="0.0138%" height="15" fill="rgb(232,36,49)" fg:x="1862" fg:w="13"/><text x="2.2209%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (133 samples, 0.14%)</title><rect x="1.9910%" y="117" width="0.1408%" height="15" fill="rgb(209,103,24)" fg:x="1881" fg:w="133"/><text x="2.2410%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (82 samples, 0.09%)</title><rect x="2.0450%" y="101" width="0.0868%" height="15" fill="rgb(229,88,8)" fg:x="1932" fg:w="82"/><text x="2.2950%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (184 samples, 0.19%)</title><rect x="1.9381%" y="149" width="0.1948%" height="15" fill="rgb(213,181,19)" fg:x="1831" fg:w="184"/><text x="2.1881%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (140 samples, 0.15%)</title><rect x="1.9847%" y="133" width="0.1482%" height="15" fill="rgb(254,191,54)" fg:x="1875" fg:w="140"/><text x="2.2347%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (11 samples, 0.01%)</title><rect x="2.1328%" y="149" width="0.0116%" height="15" fill="rgb(241,83,37)" fg:x="2015" fg:w="11"/><text x="2.3828%" y="159.50"></text></g><g><title>neural-net`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (246 samples, 0.26%)</title><rect x="1.8957%" y="165" width="0.2604%" height="15" fill="rgb(233,36,39)" fg:x="1791" fg:w="246"/><text x="2.1457%" y="175.50"></text></g><g><title>neural-net`neural_net::neural::matrix_transpose (580 samples, 0.61%)</title><rect x="1.5539%" y="181" width="0.6139%" height="15" fill="rgb(226,3,54)" fg:x="1468" fg:w="580"/><text x="1.8039%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (17 samples, 0.02%)</title><rect x="2.2609%" y="149" width="0.0180%" height="15" fill="rgb(245,192,40)" fg:x="2136" fg:w="17"/><text x="2.5109%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (96 samples, 0.10%)</title><rect x="2.3022%" y="117" width="0.1016%" height="15" fill="rgb(238,167,29)" fg:x="2175" fg:w="96"/><text x="2.5522%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (87 samples, 0.09%)</title><rect x="2.3117%" y="101" width="0.0921%" height="15" fill="rgb(232,182,51)" fg:x="2184" fg:w="87"/><text x="2.5617%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (83 samples, 0.09%)</title><rect x="2.3160%" y="85" width="0.0879%" height="15" fill="rgb(231,60,39)" fg:x="2188" fg:w="83"/><text x="2.5660%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (61 samples, 0.06%)</title><rect x="2.3392%" y="69" width="0.0646%" height="15" fill="rgb(208,69,12)" fg:x="2210" fg:w="61"/><text x="2.5892%" y="79.50"></text></g><g><title>neural-net`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (119 samples, 0.13%)</title><rect x="2.2789%" y="149" width="0.1260%" height="15" fill="rgb(235,93,37)" fg:x="2153" fg:w="119"/><text x="2.5289%" y="159.50"></text></g><g><title>neural-net`alloc::raw_vec::finish_grow (105 samples, 0.11%)</title><rect x="2.2937%" y="133" width="0.1111%" height="15" fill="rgb(213,116,39)" fg:x="2167" fg:w="105"/><text x="2.5437%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (57 samples, 0.06%)</title><rect x="3.6592%" y="69" width="0.0603%" height="15" fill="rgb(222,207,29)" fg:x="3457" fg:w="57"/><text x="3.9092%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (29 samples, 0.03%)</title><rect x="3.6888%" y="53" width="0.0307%" height="15" fill="rgb(206,96,30)" fg:x="3485" fg:w="29"/><text x="3.9388%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (70 samples, 0.07%)</title><rect x="3.6465%" y="101" width="0.0741%" height="15" fill="rgb(218,138,4)" fg:x="3445" fg:w="70"/><text x="3.8965%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (62 samples, 0.07%)</title><rect x="3.6549%" y="85" width="0.0656%" height="15" fill="rgb(250,191,14)" fg:x="3453" fg:w="62"/><text x="3.9049%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.02%)</title><rect x="3.7259%" y="101" width="0.0233%" height="15" fill="rgb(239,60,40)" fg:x="3520" fg:w="22"/><text x="3.9759%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.02%)</title><rect x="3.7333%" y="85" width="0.0159%" height="15" fill="rgb(206,27,48)" fg:x="3527" fg:w="15"/><text x="3.9833%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (18 samples, 0.02%)</title><rect x="3.7555%" y="101" width="0.0191%" height="15" fill="rgb(225,35,8)" fg:x="3548" fg:w="18"/><text x="4.0055%" y="111.50"></text></g><g><title>neural-net`rayon::iter::plumbing::Folder::consume_iter (166 samples, 0.18%)</title><rect x="3.5999%" y="133" width="0.1757%" height="15" fill="rgb(250,213,24)" fg:x="3401" fg:w="166"/><text x="3.8499%" y="143.50"></text></g><g><title>neural-net`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (151 samples, 0.16%)</title><rect x="3.6158%" y="117" width="0.1598%" height="15" fill="rgb(247,123,22)" fg:x="3416" fg:w="151"/><text x="3.8658%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (13 samples, 0.01%)</title><rect x="3.8592%" y="117" width="0.0138%" height="15" fill="rgb(231,138,38)" fg:x="3646" fg:w="13"/><text x="4.1092%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (57 samples, 0.06%)</title><rect x="3.8751%" y="117" width="0.0603%" height="15" fill="rgb(231,145,46)" fg:x="3661" fg:w="57"/><text x="4.1251%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (3,271 samples, 3.46%)</title><rect x="3.9704%" y="101" width="3.4623%" height="15" fill="rgb(251,118,11)" fg:x="3751" fg:w="3271"/><text x="4.2204%" y="111.50">lib..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (32 samples, 0.03%)</title><rect x="7.5067%" y="85" width="0.0339%" height="15" fill="rgb(217,147,25)" fg:x="7092" fg:w="32"/><text x="7.7567%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (87 samples, 0.09%)</title><rect x="7.5406%" y="69" width="0.0921%" height="15" fill="rgb(247,81,37)" fg:x="7124" fg:w="87"/><text x="7.7906%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (89 samples, 0.09%)</title><rect x="7.5406%" y="85" width="0.0942%" height="15" fill="rgb(209,12,38)" fg:x="7124" fg:w="89"/><text x="7.7906%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (50 samples, 0.05%)</title><rect x="7.6348%" y="85" width="0.0529%" height="15" fill="rgb(227,1,9)" fg:x="7213" fg:w="50"/><text x="7.8848%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (258 samples, 0.27%)</title><rect x="7.4327%" y="101" width="0.2731%" height="15" fill="rgb(248,47,43)" fg:x="7022" fg:w="258"/><text x="7.6827%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (17 samples, 0.02%)</title><rect x="7.6877%" y="85" width="0.0180%" height="15" fill="rgb(221,10,30)" fg:x="7263" fg:w="17"/><text x="7.9377%" y="95.50"></text></g><g><title>neural-net`rayon_core::latch::LockLatch::wait_and_reset (3,576 samples, 3.79%)</title><rect x="3.9386%" y="117" width="3.7851%" height="15" fill="rgb(210,229,1)" fg:x="3721" fg:w="3576"/><text x="4.1886%" y="127.50">neur..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (17 samples, 0.02%)</title><rect x="7.7057%" y="101" width="0.0180%" height="15" fill="rgb(222,148,37)" fg:x="7280" fg:w="17"/><text x="7.9557%" y="111.50"></text></g><g><title>neural-net`rayon_core::registry::Registry::in_worker_cold (3,856 samples, 4.08%)</title><rect x="3.7756%" y="133" width="4.0815%" height="15" fill="rgb(234,67,33)" fg:x="3567" fg:w="3856"/><text x="4.0256%" y="143.50">neur..</text></g><g><title>neural-net`rayon_core::registry::Registry::inject (126 samples, 0.13%)</title><rect x="7.7237%" y="117" width="0.1334%" height="15" fill="rgb(247,98,35)" fg:x="7297" fg:w="126"/><text x="7.9737%" y="127.50"></text></g><g><title>neural-net`crossbeam_deque::deque::Injector&lt;T&gt;::push (70 samples, 0.07%)</title><rect x="7.7830%" y="101" width="0.0741%" height="15" fill="rgb(247,138,52)" fg:x="7353" fg:w="70"/><text x="8.0330%" y="111.50"></text></g><g><title>neural-net`rayon::iter::plumbing::bridge_producer_consumer::helper (5,156 samples, 5.46%)</title><rect x="2.4049%" y="149" width="5.4575%" height="15" fill="rgb(213,79,30)" fg:x="2272" fg:w="5156"/><text x="2.6549%" y="159.50">neural-..</text></g><g><title>neural-net`rayon_core::current_num_threads (21 samples, 0.02%)</title><rect x="7.8624%" y="149" width="0.0222%" height="15" fill="rgb(246,177,23)" fg:x="7428" fg:w="21"/><text x="8.1124%" y="159.50"></text></g><g><title>neural-net`rayon_core::registry::global_registry (12 samples, 0.01%)</title><rect x="7.8719%" y="133" width="0.0127%" height="15" fill="rgb(230,62,27)" fg:x="7437" fg:w="12"/><text x="8.1219%" y="143.50"></text></g><g><title>neural-net`rayon::iter::collect::collect_with_consumer (5,356 samples, 5.67%)</title><rect x="2.2207%" y="165" width="5.6692%" height="15" fill="rgb(216,154,8)" fg:x="2098" fg:w="5356"/><text x="2.4707%" y="175.50">neural-..</text></g><g><title>neural-net`neural_net::neural::NeuralNet::train (6,802 samples, 7.20%)</title><rect x="0.7018%" y="197" width="7.1998%" height="15" fill="rgb(244,35,45)" fg:x="663" fg:w="6802"/><text x="0.9518%" y="207.50">neural-net..</text></g><g><title>neural-net`rayon::iter::extend::_&lt;impl rayon::iter::ParallelExtend&lt;T&gt; for alloc::vec::Vec&lt;T&gt;&gt;::par_extend (5,413 samples, 5.73%)</title><rect x="2.1720%" y="181" width="5.7296%" height="15" fill="rgb(251,115,12)" fg:x="2052" fg:w="5413"/><text x="2.4220%" y="191.50">neural-..</text></g><g><title>neural-net`rayon_core::current_num_threads (10 samples, 0.01%)</title><rect x="7.8910%" y="165" width="0.0106%" height="15" fill="rgb(240,54,50)" fg:x="7455" fg:w="10"/><text x="8.1410%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (119 samples, 0.13%)</title><rect x="7.9947%" y="181" width="0.1260%" height="15" fill="rgb(233,84,52)" fg:x="7553" fg:w="119"/><text x="8.2447%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (100 samples, 0.11%)</title><rect x="8.0148%" y="165" width="0.1058%" height="15" fill="rgb(207,117,47)" fg:x="7572" fg:w="100"/><text x="8.2648%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (88 samples, 0.09%)</title><rect x="8.0275%" y="149" width="0.0931%" height="15" fill="rgb(249,43,39)" fg:x="7584" fg:w="88"/><text x="8.2775%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (36 samples, 0.04%)</title><rect x="8.0826%" y="133" width="0.0381%" height="15" fill="rgb(209,38,44)" fg:x="7636" fg:w="36"/><text x="8.3326%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (43 samples, 0.05%)</title><rect x="8.1440%" y="165" width="0.0455%" height="15" fill="rgb(236,212,23)" fg:x="7694" fg:w="43"/><text x="8.3940%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (66 samples, 0.07%)</title><rect x="8.1217%" y="181" width="0.0699%" height="15" fill="rgb(242,79,21)" fg:x="7673" fg:w="66"/><text x="8.3717%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (11 samples, 0.01%)</title><rect x="8.1916%" y="181" width="0.0116%" height="15" fill="rgb(211,96,35)" fg:x="7739" fg:w="11"/><text x="8.4416%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (68 samples, 0.07%)</title><rect x="8.2032%" y="181" width="0.0720%" height="15" fill="rgb(253,215,40)" fg:x="7750" fg:w="68"/><text x="8.4532%" y="191.50"></text></g><g><title>neural-net`neural_net::neural::Neuron::calculate (358 samples, 0.38%)</title><rect x="7.9016%" y="197" width="0.3789%" height="15" fill="rgb(211,81,21)" fg:x="7465" fg:w="358"/><text x="8.1516%" y="207.50"></text></g><g><title>neural-net`neural_net::main (7,797 samples, 8.25%)</title><rect x="0.0519%" y="213" width="8.2530%" height="15" fill="rgb(208,190,38)" fg:x="49" fg:w="7797"/><text x="0.3019%" y="223.50">neural-net`..</text></g><g><title>dyld`start (7,850 samples, 8.31%)</title><rect x="0.0000%" y="293" width="8.3091%" height="15" fill="rgb(235,213,38)" fg:x="0" fg:w="7850"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>neural-net`main (7,850 samples, 8.31%)</title><rect x="0.0000%" y="277" width="8.3091%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="7850"/><text x="0.2500%" y="287.50">neural-net`m..</text></g><g><title>neural-net`std::rt::lang_start_internal (7,850 samples, 8.31%)</title><rect x="0.0000%" y="261" width="8.3091%" height="15" fill="rgb(244,218,35)" fg:x="0" fg:w="7850"/><text x="0.2500%" y="271.50">neural-net`s..</text></g><g><title>neural-net`std::rt::lang_start::_{{closure}} (7,850 samples, 8.31%)</title><rect x="0.0000%" y="245" width="8.3091%" height="15" fill="rgb(240,68,47)" fg:x="0" fg:w="7850"/><text x="0.2500%" y="255.50">neural-net`s..</text></g><g><title>neural-net`std::sys::backtrace::__rust_begin_short_backtrace (7,850 samples, 8.31%)</title><rect x="0.0000%" y="229" width="8.3091%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="7850"/><text x="0.2500%" y="239.50">neural-net`s..</text></g><g><title>libsystem_pthread.dylib`cthread_yield (264 samples, 0.28%)</title><rect x="8.3101%" y="197" width="0.2794%" height="15" fill="rgb(235,124,12)" fg:x="7851" fg:w="264"/><text x="8.5601%" y="207.50"></text></g><g><title>neural-net`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (23 samples, 0.02%)</title><rect x="8.5959%" y="197" width="0.0243%" height="15" fill="rgb(224,169,11)" fg:x="8121" fg:w="23"/><text x="8.8459%" y="207.50"></text></g><g><title>neural-net`DYLD-STUB$$sched_yield (18 samples, 0.02%)</title><rect x="8.6203%" y="197" width="0.0191%" height="15" fill="rgb(250,166,2)" fg:x="8144" fg:w="18"/><text x="8.8703%" y="207.50"></text></g><g><title>neural-net`rayon_core::registry::WorkerThread::find_work (28 samples, 0.03%)</title><rect x="8.6436%" y="197" width="0.0296%" height="15" fill="rgb(242,216,29)" fg:x="8166" fg:w="28"/><text x="8.8936%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (15 samples, 0.02%)</title><rect x="9.4819%" y="181" width="0.0159%" height="15" fill="rgb(230,116,27)" fg:x="8958" fg:w="15"/><text x="9.7319%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (53,195 samples, 56.31%)</title><rect x="9.4978%" y="181" width="56.3059%" height="15" fill="rgb(228,99,48)" fg:x="8973" fg:w="53195"/><text x="9.7478%" y="191.50">libsystem_kernel.dylib`swtch_pri</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$swtch_pri (13 samples, 0.01%)</title><rect x="65.8037%" y="181" width="0.0138%" height="15" fill="rgb(253,11,6)" fg:x="62168" fg:w="13"/><text x="66.0537%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (400 samples, 0.42%)</title><rect x="65.8280%" y="181" width="0.4234%" height="15" fill="rgb(247,143,39)" fg:x="62191" fg:w="400"/><text x="66.0780%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (33 samples, 0.03%)</title><rect x="66.2567%" y="181" width="0.0349%" height="15" fill="rgb(236,97,10)" fg:x="62596" fg:w="33"/><text x="66.5067%" y="191.50"></text></g><g><title>neural-net`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (29 samples, 0.03%)</title><rect x="66.2916%" y="181" width="0.0307%" height="15" fill="rgb(233,208,19)" fg:x="62629" fg:w="29"/><text x="66.5416%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (39 samples, 0.04%)</title><rect x="66.4895%" y="165" width="0.0413%" height="15" fill="rgb(216,164,2)" fg:x="62816" fg:w="39"/><text x="66.7395%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (38 samples, 0.04%)</title><rect x="66.4906%" y="149" width="0.0402%" height="15" fill="rgb(220,129,5)" fg:x="62817" fg:w="38"/><text x="66.7406%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (10 samples, 0.01%)</title><rect x="66.5393%" y="165" width="0.0106%" height="15" fill="rgb(242,17,10)" fg:x="62863" fg:w="10"/><text x="66.7893%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvbroad (2,056 samples, 2.18%)</title><rect x="66.6197%" y="149" width="2.1762%" height="15" fill="rgb(242,107,0)" fg:x="62939" fg:w="2056"/><text x="66.8697%" y="159.50">l..</text></g><g><title>libsystem_pthread.dylib`pthread_cond_broadcast (110 samples, 0.12%)</title><rect x="68.8034%" y="149" width="0.1164%" height="15" fill="rgb(251,28,31)" fg:x="65002" fg:w="110"/><text x="69.0534%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (33 samples, 0.03%)</title><rect x="68.8849%" y="133" width="0.0349%" height="15" fill="rgb(233,223,10)" fg:x="65079" fg:w="33"/><text x="69.1349%" y="143.50"></text></g><g><title>neural-net`&lt;rayon_core::latch::LatchRef&lt;L&gt; as rayon_core::latch::Latch&gt;::set (2,315 samples, 2.45%)</title><rect x="66.5499%" y="165" width="2.4504%" height="15" fill="rgb(215,21,27)" fg:x="62873" fg:w="2315"/><text x="66.7999%" y="175.50">ne..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (76 samples, 0.08%)</title><rect x="68.9198%" y="149" width="0.0804%" height="15" fill="rgb(232,23,21)" fg:x="65112" fg:w="76"/><text x="69.1698%" y="159.50"></text></g><g><title>neural-net`core::ptr::drop_in_place&lt;rayon_core::job::JobResult&lt;(rayon::iter::collect::consumer::CollectResult&lt;alloc::vec::Vec&lt;f32&gt;&gt;,rayon::iter::collect::consumer::CollectResult&lt;alloc::vec::Vec&lt;f32&gt;&gt;)&gt;&gt; (14 samples, 0.01%)</title><rect x="69.0024%" y="165" width="0.0148%" height="15" fill="rgb(244,5,23)" fg:x="65190" fg:w="14"/><text x="69.2524%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (126 samples, 0.13%)</title><rect x="69.4596%" y="117" width="0.1334%" height="15" fill="rgb(226,81,46)" fg:x="65622" fg:w="126"/><text x="69.7096%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (105 samples, 0.11%)</title><rect x="69.4819%" y="101" width="0.1111%" height="15" fill="rgb(247,70,30)" fg:x="65643" fg:w="105"/><text x="69.7319%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (101 samples, 0.11%)</title><rect x="69.4861%" y="85" width="0.1069%" height="15" fill="rgb(212,68,19)" fg:x="65647" fg:w="101"/><text x="69.7361%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (61 samples, 0.06%)</title><rect x="69.5284%" y="69" width="0.0646%" height="15" fill="rgb(240,187,13)" fg:x="65687" fg:w="61"/><text x="69.7784%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (11 samples, 0.01%)</title><rect x="69.5930%" y="117" width="0.0116%" height="15" fill="rgb(223,113,26)" fg:x="65748" fg:w="11"/><text x="69.8430%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (35 samples, 0.04%)</title><rect x="69.6248%" y="101" width="0.0370%" height="15" fill="rgb(206,192,2)" fg:x="65778" fg:w="35"/><text x="69.8748%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (57 samples, 0.06%)</title><rect x="69.6047%" y="117" width="0.0603%" height="15" fill="rgb(241,108,4)" fg:x="65759" fg:w="57"/><text x="69.8547%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.01%)</title><rect x="69.6650%" y="117" width="0.0127%" height="15" fill="rgb(247,173,49)" fg:x="65816" fg:w="12"/><text x="69.9150%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (24 samples, 0.03%)</title><rect x="69.6777%" y="117" width="0.0254%" height="15" fill="rgb(224,114,35)" fg:x="65828" fg:w="24"/><text x="69.9277%" y="127.50"></text></g><g><title>neural-net`rayon::iter::plumbing::bridge_producer_consumer::helper (646 samples, 0.68%)</title><rect x="69.0225%" y="165" width="0.6838%" height="15" fill="rgb(245,159,27)" fg:x="65209" fg:w="646"/><text x="69.2725%" y="175.50"></text></g><g><title>neural-net`rayon::iter::plumbing::Folder::consume_iter (612 samples, 0.65%)</title><rect x="69.0585%" y="149" width="0.6478%" height="15" fill="rgb(245,172,44)" fg:x="65243" fg:w="612"/><text x="69.3085%" y="159.50"></text></g><g><title>neural-net`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (574 samples, 0.61%)</title><rect x="69.0987%" y="133" width="0.6076%" height="15" fill="rgb(236,23,11)" fg:x="65281" fg:w="574"/><text x="69.3487%" y="143.50"></text></g><g><title>neural-net`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (26 samples, 0.03%)</title><rect x="69.8111%" y="149" width="0.0275%" height="15" fill="rgb(205,117,38)" fg:x="65954" fg:w="26"/><text x="70.0611%" y="159.50"></text></g><g><title>neural-net`crossbeam_epoch::default::with_handle (12 samples, 0.01%)</title><rect x="69.8259%" y="133" width="0.0127%" height="15" fill="rgb(237,72,25)" fg:x="65968" fg:w="12"/><text x="70.0759%" y="143.50"></text></g><g><title>neural-net`crossbeam_deque::deque::Worker&lt;T&gt;::pop (12 samples, 0.01%)</title><rect x="69.8386%" y="149" width="0.0127%" height="15" fill="rgb(244,70,9)" fg:x="65980" fg:w="12"/><text x="70.0886%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (161 samples, 0.17%)</title><rect x="70.1286%" y="69" width="0.1704%" height="15" fill="rgb(217,125,39)" fg:x="66254" fg:w="161"/><text x="70.3786%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (97 samples, 0.10%)</title><rect x="70.1963%" y="53" width="0.1027%" height="15" fill="rgb(235,36,10)" fg:x="66318" fg:w="97"/><text x="70.4463%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (194 samples, 0.21%)</title><rect x="70.0947%" y="101" width="0.2053%" height="15" fill="rgb(251,123,47)" fg:x="66222" fg:w="194"/><text x="70.3447%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (172 samples, 0.18%)</title><rect x="70.1180%" y="85" width="0.1821%" height="15" fill="rgb(221,13,13)" fg:x="66244" fg:w="172"/><text x="70.3680%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (17 samples, 0.02%)</title><rect x="70.3001%" y="101" width="0.0180%" height="15" fill="rgb(238,131,9)" fg:x="66416" fg:w="17"/><text x="70.5501%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (45 samples, 0.05%)</title><rect x="70.3498%" y="85" width="0.0476%" height="15" fill="rgb(211,50,8)" fg:x="66463" fg:w="45"/><text x="70.5998%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (78 samples, 0.08%)</title><rect x="70.3181%" y="101" width="0.0826%" height="15" fill="rgb(245,182,24)" fg:x="66433" fg:w="78"/><text x="70.5681%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (49 samples, 0.05%)</title><rect x="70.4028%" y="101" width="0.0519%" height="15" fill="rgb(242,14,37)" fg:x="66513" fg:w="49"/><text x="70.6528%" y="111.50"></text></g><g><title>neural-net`rayon::iter::plumbing::bridge_producer_consumer::helper (573 samples, 0.61%)</title><rect x="69.8555%" y="149" width="0.6065%" height="15" fill="rgb(246,228,12)" fg:x="65996" fg:w="573"/><text x="70.1055%" y="159.50"></text></g><g><title>neural-net`rayon::iter::plumbing::Folder::consume_iter (537 samples, 0.57%)</title><rect x="69.8936%" y="133" width="0.5684%" height="15" fill="rgb(213,55,15)" fg:x="66032" fg:w="537"/><text x="70.1436%" y="143.50"></text></g><g><title>neural-net`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (471 samples, 0.50%)</title><rect x="69.9635%" y="117" width="0.4985%" height="15" fill="rgb(209,9,3)" fg:x="66098" fg:w="471"/><text x="70.2135%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (27 samples, 0.03%)</title><rect x="70.5245%" y="53" width="0.0286%" height="15" fill="rgb(230,59,30)" fg:x="66628" fg:w="27"/><text x="70.7745%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (18 samples, 0.02%)</title><rect x="70.5340%" y="37" width="0.0191%" height="15" fill="rgb(209,121,21)" fg:x="66637" fg:w="18"/><text x="70.7840%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (42 samples, 0.04%)</title><rect x="70.5097%" y="85" width="0.0445%" height="15" fill="rgb(220,109,13)" fg:x="66614" fg:w="42"/><text x="70.7597%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (32 samples, 0.03%)</title><rect x="70.5202%" y="69" width="0.0339%" height="15" fill="rgb(232,18,1)" fg:x="66624" fg:w="32"/><text x="70.7702%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.02%)</title><rect x="70.5583%" y="85" width="0.0180%" height="15" fill="rgb(215,41,42)" fg:x="66660" fg:w="17"/><text x="70.8083%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (14 samples, 0.01%)</title><rect x="70.5615%" y="69" width="0.0148%" height="15" fill="rgb(224,123,36)" fg:x="66663" fg:w="14"/><text x="70.8115%" y="79.50"></text></g><g><title>neural-net`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (124 samples, 0.13%)</title><rect x="70.4620%" y="149" width="0.1313%" height="15" fill="rgb(240,125,3)" fg:x="66569" fg:w="124"/><text x="70.7120%" y="159.50"></text></g><g><title>neural-net`rayon::iter::plumbing::bridge_producer_consumer::helper (121 samples, 0.13%)</title><rect x="70.4652%" y="133" width="0.1281%" height="15" fill="rgb(205,98,50)" fg:x="66572" fg:w="121"/><text x="70.7152%" y="143.50"></text></g><g><title>neural-net`rayon::iter::plumbing::Folder::consume_iter (116 samples, 0.12%)</title><rect x="70.4705%" y="117" width="0.1228%" height="15" fill="rgb(205,185,37)" fg:x="66577" fg:w="116"/><text x="70.7205%" y="127.50"></text></g><g><title>neural-net`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (103 samples, 0.11%)</title><rect x="70.4843%" y="101" width="0.1090%" height="15" fill="rgb(238,207,15)" fg:x="66590" fg:w="103"/><text x="70.7343%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (13 samples, 0.01%)</title><rect x="70.5795%" y="85" width="0.0138%" height="15" fill="rgb(213,199,42)" fg:x="66680" fg:w="13"/><text x="70.8295%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (948 samples, 1.00%)</title><rect x="70.6801%" y="133" width="1.0034%" height="15" fill="rgb(235,201,11)" fg:x="66775" fg:w="948"/><text x="70.9301%" y="143.50"></text></g><g><title>neural-net`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (11 samples, 0.01%)</title><rect x="71.6909%" y="133" width="0.0116%" height="15" fill="rgb(207,46,11)" fg:x="67730" fg:w="11"/><text x="71.9409%" y="143.50"></text></g><g><title>neural-net`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (146 samples, 0.15%)</title><rect x="71.7608%" y="101" width="0.1545%" height="15" fill="rgb(241,35,35)" fg:x="67796" fg:w="146"/><text x="72.0108%" y="111.50"></text></g><g><title>neural-net`crossbeam_epoch::default::with_handle (96 samples, 0.10%)</title><rect x="71.8137%" y="85" width="0.1016%" height="15" fill="rgb(243,32,47)" fg:x="67846" fg:w="96"/><text x="72.0637%" y="95.50"></text></g><g><title>neural-net`crossbeam_epoch::internal::Global::collect (21 samples, 0.02%)</title><rect x="71.8931%" y="69" width="0.0222%" height="15" fill="rgb(247,202,23)" fg:x="67921" fg:w="21"/><text x="72.1431%" y="79.50"></text></g><g><title>neural-net`crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (10 samples, 0.01%)</title><rect x="71.9047%" y="53" width="0.0106%" height="15" fill="rgb(219,102,11)" fg:x="67932" fg:w="10"/><text x="72.1547%" y="63.50"></text></g><g><title>neural-net`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (185 samples, 0.20%)</title><rect x="71.7237%" y="117" width="0.1958%" height="15" fill="rgb(243,110,44)" fg:x="67761" fg:w="185"/><text x="71.9737%" y="127.50"></text></g><g><title>neural-net`crossbeam_deque::deque::Injector&lt;T&gt;::steal (17 samples, 0.02%)</title><rect x="71.9196%" y="117" width="0.0180%" height="15" fill="rgb(222,74,54)" fg:x="67946" fg:w="17"/><text x="72.1696%" y="127.50"></text></g><g><title>neural-net`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (22 samples, 0.02%)</title><rect x="71.9375%" y="117" width="0.0233%" height="15" fill="rgb(216,99,12)" fg:x="67963" fg:w="22"/><text x="72.1875%" y="127.50"></text></g><g><title>neural-net`rayon_core::registry::WorkerThread::find_work (249 samples, 0.26%)</title><rect x="71.7026%" y="133" width="0.2636%" height="15" fill="rgb(226,22,26)" fg:x="67741" fg:w="249"/><text x="71.9526%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (104 samples, 0.11%)</title><rect x="71.9809%" y="101" width="0.1101%" height="15" fill="rgb(217,163,10)" fg:x="68004" fg:w="104"/><text x="72.2309%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (27 samples, 0.03%)</title><rect x="72.1069%" y="101" width="0.0286%" height="15" fill="rgb(213,25,53)" fg:x="68123" fg:w="27"/><text x="72.3569%" y="111.50"></text></g><g><title>neural-net`rayon_core::sleep::Sleep::wake_any_threads (166 samples, 0.18%)</title><rect x="71.9672%" y="133" width="0.1757%" height="15" fill="rgb(252,105,26)" fg:x="67991" fg:w="166"/><text x="72.2172%" y="143.50"></text></g><g><title>neural-net`rayon_core::sleep::Sleep::wake_specific_thread (157 samples, 0.17%)</title><rect x="71.9767%" y="117" width="0.1662%" height="15" fill="rgb(220,39,43)" fg:x="68000" fg:w="157"/><text x="72.2267%" y="127.50"></text></g><g><title>neural-net`rayon_core::registry::WorkerThread::wait_until_cold (1,465 samples, 1.55%)</title><rect x="70.5933%" y="149" width="1.5507%" height="15" fill="rgb(229,68,48)" fg:x="66693" fg:w="1465"/><text x="70.8433%" y="159.50"></text></g><g><title>neural-net`rayon_core::join::join_context::_{{closure}} (2,304 samples, 2.44%)</title><rect x="69.7063%" y="165" width="2.4387%" height="15" fill="rgb(252,8,32)" fg:x="65855" fg:w="2304"/><text x="69.9563%" y="175.50">ne..</text></g><g><title>neural-net`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (5,502 samples, 5.82%)</title><rect x="66.3223%" y="181" width="5.8238%" height="15" fill="rgb(223,20,43)" fg:x="62658" fg:w="5502"/><text x="66.5723%" y="191.50">neural-..</text></g><g><title>neural-net`crossbeam_deque::deque::Injector&lt;T&gt;::steal (32 samples, 0.03%)</title><rect x="72.1503%" y="181" width="0.0339%" height="15" fill="rgb(229,81,49)" fg:x="68164" fg:w="32"/><text x="72.4003%" y="191.50"></text></g><g><title>neural-net`crossbeam_epoch::default::with_handle (50 samples, 0.05%)</title><rect x="72.2233%" y="165" width="0.0529%" height="15" fill="rgb(236,28,36)" fg:x="68233" fg:w="50"/><text x="72.4733%" y="175.50"></text></g><g><title>neural-net`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (88 samples, 0.09%)</title><rect x="72.1842%" y="181" width="0.0931%" height="15" fill="rgb(249,185,26)" fg:x="68196" fg:w="88"/><text x="72.4342%" y="191.50"></text></g><g><title>neural-net`crossbeam_deque::deque::Worker&lt;T&gt;::pop (39 samples, 0.04%)</title><rect x="72.2773%" y="181" width="0.0413%" height="15" fill="rgb(249,174,33)" fg:x="68284" fg:w="39"/><text x="72.5273%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (267 samples, 0.28%)</title><rect x="73.5316%" y="165" width="0.2826%" height="15" fill="rgb(233,201,37)" fg:x="69469" fg:w="267"/><text x="73.7816%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (561 samples, 0.59%)</title><rect x="76.7716%" y="149" width="0.5938%" height="15" fill="rgb(221,78,26)" fg:x="72530" fg:w="561"/><text x="77.0216%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (280 samples, 0.30%)</title><rect x="80.4700%" y="133" width="0.2964%" height="15" fill="rgb(250,127,30)" fg:x="76024" fg:w="280"/><text x="80.7200%" y="143.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (18 samples, 0.02%)</title><rect x="86.8939%" y="101" width="0.0191%" height="15" fill="rgb(230,49,44)" fg:x="82093" fg:w="18"/><text x="87.1439%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (32 samples, 0.03%)</title><rect x="86.9129%" y="101" width="0.0339%" height="15" fill="rgb(229,67,23)" fg:x="82111" fg:w="32"/><text x="87.1629%" y="111.50"></text></g><g><title>neural-net`&lt;crossbeam_epoch::sync::list::Iter&lt;T,C&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="86.9468%" y="101" width="0.0148%" height="15" fill="rgb(249,83,47)" fg:x="82143" fg:w="14"/><text x="87.1968%" y="111.50"></text></g><g><title>neural-net`crossbeam_epoch::internal::Global::try_advance (487 samples, 0.52%)</title><rect x="86.9627%" y="101" width="0.5155%" height="15" fill="rgb(215,43,3)" fg:x="82158" fg:w="487"/><text x="87.2127%" y="111.50"></text></g><g><title>neural-net`&lt;crossbeam_epoch::sync::list::Iter&lt;T,C&gt; as core::iter::traits::iterator::Iterator&gt;::next (112 samples, 0.12%)</title><rect x="87.3596%" y="85" width="0.1185%" height="15" fill="rgb(238,154,13)" fg:x="82533" fg:w="112"/><text x="87.6096%" y="95.50"></text></g><g><title>neural-net`crossbeam_epoch::internal::Global::collect (2,314 samples, 2.45%)</title><rect x="86.8272%" y="117" width="2.4493%" height="15" fill="rgb(219,56,2)" fg:x="82030" fg:w="2314"/><text x="87.0772%" y="127.50">ne..</text></g><g><title>neural-net`crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (1,699 samples, 1.80%)</title><rect x="87.4782%" y="101" width="1.7984%" height="15" fill="rgb(233,0,4)" fg:x="82645" fg:w="1699"/><text x="87.7282%" y="111.50">n..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,678 samples, 1.78%)</title><rect x="87.5004%" y="85" width="1.7761%" height="15" fill="rgb(235,30,7)" fg:x="82666" fg:w="1678"/><text x="87.7504%" y="95.50">l..</text></g><g><title>neural-net`crossbeam_epoch::internal::Global::try_advance (21 samples, 0.02%)</title><rect x="89.2765%" y="117" width="0.0222%" height="15" fill="rgb(250,79,13)" fg:x="84344" fg:w="21"/><text x="89.5265%" y="127.50"></text></g><g><title>neural-net`crossbeam_epoch::default::with_handle (8,064 samples, 8.54%)</title><rect x="80.7663%" y="133" width="8.5356%" height="15" fill="rgb(211,146,34)" fg:x="76304" fg:w="8064"/><text x="81.0163%" y="143.50">neural-net`c..</text></g><g><title>neural-net`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (11,294 samples, 11.95%)</title><rect x="77.3654%" y="149" width="11.9545%" height="15" fill="rgb(228,22,38)" fg:x="73091" fg:w="11294"/><text x="77.6154%" y="159.50">neural-net`crossbe..</text></g><g><title>neural-net`crossbeam_epoch::internal::Global::collect (17 samples, 0.02%)</title><rect x="89.3019%" y="133" width="0.0180%" height="15" fill="rgb(235,168,5)" fg:x="84368" fg:w="17"/><text x="89.5519%" y="143.50"></text></g><g><title>neural-net`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14,785 samples, 15.65%)</title><rect x="73.8142%" y="165" width="15.6496%" height="15" fill="rgb(221,155,16)" fg:x="69736" fg:w="14785"/><text x="74.0642%" y="175.50">neural-net`&lt;core::iter::..</text></g><g><title>neural-net`crossbeam_epoch::default::with_handle (136 samples, 0.14%)</title><rect x="89.3199%" y="149" width="0.1440%" height="15" fill="rgb(215,215,53)" fg:x="84385" fg:w="136"/><text x="89.5699%" y="159.50"></text></g><g><title>neural-net`crossbeam_deque::deque::Injector&lt;T&gt;::steal (1,634 samples, 1.73%)</title><rect x="89.4639%" y="165" width="1.7296%" height="15" fill="rgb(223,4,10)" fg:x="84521" fg:w="1634"/><text x="89.7139%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (26 samples, 0.03%)</title><rect x="92.5218%" y="149" width="0.0275%" height="15" fill="rgb(234,103,6)" fg:x="87410" fg:w="26"/><text x="92.7718%" y="159.50"></text></g><g><title>neural-net`crossbeam_epoch::internal::Global::try_advance (86 samples, 0.09%)</title><rect x="93.7677%" y="117" width="0.0910%" height="15" fill="rgb(227,97,0)" fg:x="88587" fg:w="86"/><text x="94.0177%" y="127.50"></text></g><g><title>neural-net`&lt;crossbeam_epoch::sync::list::Iter&lt;T,C&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.03%)</title><rect x="93.8333%" y="101" width="0.0254%" height="15" fill="rgb(234,150,53)" fg:x="88649" fg:w="24"/><text x="94.0833%" y="111.50"></text></g><g><title>neural-net`crossbeam_epoch::internal::Global::collect (358 samples, 0.38%)</title><rect x="93.7465%" y="133" width="0.3789%" height="15" fill="rgb(228,201,54)" fg:x="88567" fg:w="358"/><text x="93.9965%" y="143.50"></text></g><g><title>neural-net`crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (252 samples, 0.27%)</title><rect x="93.8587%" y="117" width="0.2667%" height="15" fill="rgb(222,22,37)" fg:x="88673" fg:w="252"/><text x="94.1087%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (245 samples, 0.26%)</title><rect x="93.8661%" y="101" width="0.2593%" height="15" fill="rgb(237,53,32)" fg:x="88680" fg:w="245"/><text x="94.1161%" y="111.50"></text></g><g><title>neural-net`crossbeam_epoch::default::with_handle (1,493 samples, 1.58%)</title><rect x="92.5494%" y="149" width="1.5803%" height="15" fill="rgb(233,25,53)" fg:x="87436" fg:w="1493"/><text x="92.7994%" y="159.50"></text></g><g><title>neural-net`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (2,775 samples, 2.94%)</title><rect x="91.1934%" y="165" width="2.9373%" height="15" fill="rgb(210,40,34)" fg:x="86155" fg:w="2775"/><text x="91.4434%" y="175.50">ne..</text></g><g><title>neural-net`crossbeam_deque::deque::Worker&lt;T&gt;::pop (351 samples, 0.37%)</title><rect x="94.1307%" y="165" width="0.3715%" height="15" fill="rgb(241,220,44)" fg:x="88930" fg:w="351"/><text x="94.3807%" y="175.50"></text></g><g><title>neural-net`crossbeam_epoch::default::with_handle (46 samples, 0.05%)</title><rect x="94.5022%" y="165" width="0.0487%" height="15" fill="rgb(235,28,35)" fg:x="89281" fg:w="46"/><text x="94.7522%" y="175.50"></text></g><g><title>neural-net`rayon_core::registry::WorkerThread::find_work (21,003 samples, 22.23%)</title><rect x="72.3207%" y="181" width="22.2313%" height="15" fill="rgb(210,56,17)" fg:x="68325" fg:w="21003"/><text x="72.5707%" y="191.50">neural-net`rayon_core::registry::Wo..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2,885 samples, 3.05%)</title><rect x="94.7499%" y="165" width="3.0537%" height="15" fill="rgb(224,130,29)" fg:x="89515" fg:w="2885"/><text x="94.9999%" y="175.50">lib..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (18 samples, 0.02%)</title><rect x="97.8661%" y="149" width="0.0191%" height="15" fill="rgb(235,212,8)" fg:x="92459" fg:w="18"/><text x="98.1161%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (92 samples, 0.10%)</title><rect x="97.8894%" y="133" width="0.0974%" height="15" fill="rgb(223,33,50)" fg:x="92481" fg:w="92"/><text x="98.1394%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (98 samples, 0.10%)</title><rect x="97.8852%" y="149" width="0.1037%" height="15" fill="rgb(219,149,13)" fg:x="92477" fg:w="98"/><text x="98.1352%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (71 samples, 0.08%)</title><rect x="97.9889%" y="149" width="0.0752%" height="15" fill="rgb(250,156,29)" fg:x="92575" fg:w="71"/><text x="98.2389%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (254 samples, 0.27%)</title><rect x="97.8037%" y="165" width="0.2689%" height="15" fill="rgb(216,193,19)" fg:x="92400" fg:w="254"/><text x="98.0537%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (53 samples, 0.06%)</title><rect x="98.0736%" y="165" width="0.0561%" height="15" fill="rgb(216,135,14)" fg:x="92655" fg:w="53"/><text x="98.3236%" y="175.50"></text></g><g><title>neural-net`rayon_core::sleep::Sleep::sleep (3,383 samples, 3.58%)</title><rect x="94.5520%" y="181" width="3.5808%" height="15" fill="rgb(241,47,5)" fg:x="89328" fg:w="3383"/><text x="94.8020%" y="191.50">neur..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1,340 samples, 1.42%)</title><rect x="98.1889%" y="149" width="1.4184%" height="15" fill="rgb(233,42,35)" fg:x="92764" fg:w="1340"/><text x="98.4389%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (56 samples, 0.06%)</title><rect x="99.6211%" y="149" width="0.0593%" height="15" fill="rgb(231,13,6)" fg:x="94117" fg:w="56"/><text x="99.8711%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (56 samples, 0.06%)</title><rect x="99.6211%" y="133" width="0.0593%" height="15" fill="rgb(207,181,40)" fg:x="94117" fg:w="56"/><text x="99.8711%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (104 samples, 0.11%)</title><rect x="99.6803%" y="149" width="0.1101%" height="15" fill="rgb(254,173,49)" fg:x="94173" fg:w="104"/><text x="99.9303%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (32 samples, 0.03%)</title><rect x="99.7565%" y="133" width="0.0339%" height="15" fill="rgb(221,1,38)" fg:x="94245" fg:w="32"/><text x="100.0065%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (118 samples, 0.12%)</title><rect x="99.7904%" y="149" width="0.1249%" height="15" fill="rgb(206,124,46)" fg:x="94277" fg:w="118"/><text x="100.0404%" y="159.50"></text></g><g><title>neural-net`rayon_core::sleep::Sleep::wake_specific_thread (1,689 samples, 1.79%)</title><rect x="98.1519%" y="165" width="1.7878%" height="15" fill="rgb(249,21,11)" fg:x="92729" fg:w="1689"/><text x="98.4019%" y="175.50">n..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (23 samples, 0.02%)</title><rect x="99.9153%" y="149" width="0.0243%" height="15" fill="rgb(222,201,40)" fg:x="94395" fg:w="23"/><text x="100.1653%" y="159.50"></text></g><g><title>neural-net`rayon_core::sleep::Sleep::wake_any_threads (1,709 samples, 1.81%)</title><rect x="98.1328%" y="181" width="1.8089%" height="15" fill="rgb(235,61,29)" fg:x="92711" fg:w="1709"/><text x="98.3828%" y="191.50">n..</text></g><g><title>neural-net`rayon_core::registry::WorkerThread::wait_until_cold (86,239 samples, 91.28%)</title><rect x="8.6732%" y="197" width="91.2823%" height="15" fill="rgb(219,207,3)" fg:x="8194" fg:w="86239"/><text x="8.9232%" y="207.50">neural-net`rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>all (94,475 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="94475"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (86,624 samples, 91.69%)</title><rect x="8.3101%" y="293" width="91.6899%" height="15" fill="rgb(239,76,54)" fg:x="7851" fg:w="86624"/><text x="8.5601%" y="303.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (86,624 samples, 91.69%)</title><rect x="8.3101%" y="277" width="91.6899%" height="15" fill="rgb(231,124,27)" fg:x="7851" fg:w="86624"/><text x="8.5601%" y="287.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>neural-net`std::sys::pal::unix::thread::Thread::new::thread_start (86,624 samples, 91.69%)</title><rect x="8.3101%" y="261" width="91.6899%" height="15" fill="rgb(249,195,6)" fg:x="7851" fg:w="86624"/><text x="8.5601%" y="271.50">neural-net`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>neural-net`core::ops::function::FnOnce::call_once{{vtable.shim}} (86,624 samples, 91.69%)</title><rect x="8.3101%" y="245" width="91.6899%" height="15" fill="rgb(237,174,47)" fg:x="7851" fg:w="86624"/><text x="8.5601%" y="255.50">neural-net`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>neural-net`std::sys::backtrace::__rust_begin_short_backtrace (86,624 samples, 91.69%)</title><rect x="8.3101%" y="229" width="91.6899%" height="15" fill="rgb(206,201,31)" fg:x="7851" fg:w="86624"/><text x="8.5601%" y="239.50">neural-net`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>neural-net`rayon_core::registry::ThreadBuilder::run (86,624 samples, 91.69%)</title><rect x="8.3101%" y="213" width="91.6899%" height="15" fill="rgb(231,57,52)" fg:x="7851" fg:w="86624"/><text x="8.5601%" y="223.50">neural-net`rayon_core::registry::ThreadBuilder::run</text></g><g><title>neural-net`std::thread::yield_now (37 samples, 0.04%)</title><rect x="99.9608%" y="197" width="0.0392%" height="15" fill="rgb(248,177,22)" fg:x="94438" fg:w="37"/><text x="100.2108%" y="207.50"></text></g></svg></svg>